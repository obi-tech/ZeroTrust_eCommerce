services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD-SHELL", "echo srvr | nc localhost 2181 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always

  kafka:
    hostname: kafka
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_INTER_BROKER_PROTOCOL_VERSION: "3.5"
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    volumes:
      - kafka_data:/var/lib/kafka/data
    restart: always
    #restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  mongo_account:
    image: mongo
    container_name: mongo_account
    restart: always
    ports:
      - "27011:27017"
    volumes:
      - mongo_account_data:/data/db

  mongo_orders:
    image: mongo
    container_name: mongo_orders
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_orders_data:/data/db

  mongo_inventory:
    image: mongo
    container_name: mongo_inventory
    restart: always
    ports:
      - "27014:27017"
    volumes:
      - mongo_inventory_data:/data/db

  order-management-service:
    build: ./order-management-service
    image: xiru2024/order-management:latest
    container_name: order_management
    ports:
      - "8000:8000"
    environment:
      - KAFKA_BROKER=kafka:29092
      - MONGO_URI=mongodb://mongo_orders:27017/order-management
    depends_on:
      kafka:
        condition: service_started
      mongo_orders:
        condition: service_started

  product-inventory-service:
    build: ./product-inventory-service
    image: xiru2024/product-inventory:latest
    container_name: product_inventory
#    ports:
#      - "8001:8001"
    environment:
      - KAFKA_BROKER=kafka:29092
      - MONGO_URI=mongodb://mongo_inventory:27017/product-inventory

    depends_on:
      mongo_inventory:
        condition: service_started
      kafka:
        condition: service_started

  account-service:
    build: ./account-service
    image: xiru2024/account:latest
    container_name: product
    ports:
      - "11500:11500"
    environment:
      - KAFKA_BROKER=kafka:29092
      - MONGO_URI=mongodb://mongo_account:27017/account

    depends_on:
      mongo_account:
        condition: service_started
      kafka:
        condition: service_started

volumes:
  mongo_orders_data:
  mongo_inventory_data:
  mongo_account_data:
  kafka_data:
    driver: local

